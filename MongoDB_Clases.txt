
-------------------------------------------------- Mongo DB ---------------------------------------------------------

MongoDB es una base de datos tipo documental que no es relacional como lo viene siendo SQL, no relacional quiere
decir que su almacenamiento de datos no se encuentrar relacionados uno con otros de forma predeterminada pero
que se pueden acceder a ellos con una clave de valor unica de registro, cada uno de estos registros los almacena
en formato JSON

Tiene una estrucutra muy flexible para los tipos de datos y escalamientos que queramos almacenar en la base de datos
lo cual hace más facil el uso de esta herramientas en aplicaciones con mucho movimiento y almacenamiento de datos



----------------------------------- Instalacion de MongoDB (Windows)

Para hacer la instalacion de MongoDB debemos de seguir los sieguientes pasos:

	1.- Ir al siguiente enlace y descargar el instalador dependiendo de los requerimientos de tu maquina
		
			https://www.mongodb.com/try/download/community

	2.- Se recomienda descargar 3T para tener una version más optima y grafica al momento de crear bases de datos
	    en MongoDB

			https://studio3t.com/download/

		(NOTA: El puerto por donde normalmente MongoDB escucha es por el puerto 27017)

	3.- Al momento de la instalacion de 3T de preferencia hay que elegir el estado de codigo para un uso más
	    entendible como programador
	4.- Para hacer la conexion de 3T a nuestro MongoDB Server tenemos que irnos a la parte de Connect en 3T
	    agregamos una nueva connection a una base de datos y si todo sale bien debe de reconocer el puerto 27017
	    ponemos cualquier nombre a nuestra coneccion, en nuestro caso fue 'local', damos Ok y listo

	5.- Podemos crear las bases de datos en nuestro servidor MongoDB en caso de querer apagar el puerto nos vamos
	    a services en windows y buscamos 'MongoDB' y lo apagamos o encendemos




--------------------------- Crear una nueva Collecion

	1.- Vamos a nuestra Collection, damos click derecho/add collection/[Nombre de la collecion]/ok
	2.- En caso de que nos salga en tablas la estructura, vamos al fondo de la barra de herramientas y en donde
	    dice 'Table View' cambiamos por 'JSON view'


--------------------------- Crear un nuevo Documento

	1.- Damos click en el icono de add document y nos desplegara una ventana en formato JSON que nos indicara
	    como queremos que sea le estructura nuestro documento, ejemplo

		{
    			"name" : "JSON",
    			"email": "json@gmail.com",
    			"department" : {
     				"department_name" : "GBS",
     				"location" : "Mexico"   
    			}
		}

		---------------- Para asignar más documentos dentro de un documento en forma de objetos

		{ 
    			"name" : "Documents", 
    			"email" : "doc@gmail.com", 
    			"subjects" : [
        			{
            				"subject_name" : "Boris", 
            				"marks_obtained" : 70.0
        			}, 
        			{
            				"subject_name" : "Aris", 
            				"marks_obtained" : 80.0
        			}
    			], 
    			"_id" : ObjectId("617c3c2746fd2647d60d9e75")
		}		


		(NOTA: Los ID's son asignados automaticamente por MongoDB y son claves de valores unicos que no se
			volveran a repetir, para poder identificar mejor cada doducmento)







---------------------------- Mongo DB para un proyecto SpringBoot

	(NOTA: Cuando nos pida la opcion de elegir si queremos correr un proyecto como Eclipse o como Maven, elegir
	la opción de Maven)
		
spring.data.mongodb.host=ds155313.mlab.com
spring.data.mongodb.port=55313
spring.data.mongodb.database=CloudFoundry_hv1dfcci_tgvvmuld
spring.data.mongodb.username=admin
spring.data.mongodb.password=admin123


	
Para antes de comenzar a utilizar mongo dentro de nuestro proyecto, debemos de tener en cuenta que en nuestro XML(POM)
necesitaremos agregar o tener 2 dependencias las cuales son la de spring-boot-starter-web y la de 
spring-boot-starter-data-mongodb

	<dependency>
		<groupId>org.springframework.boot</gropuId>
		<artifactId>spring-boot-starter-web</artifacId>
	</dependency>
	<dependency>
		<groupId>org.springframework.boot</gropuId>
		<artifactId>spring-boot-starter-data-mongodb</artifacId>
	</dependency>



	------------ Modificacion al archivo propeties


	Para la coneccion a la base de datos tenemos que especificar el host y el puerto por donde vamos a estar
	interactuando con la base de datos y para ello agregamos la siguiente sintaxis:

		spring.data.mongodb.host = localhost <---- O ponemos la IP de nuestra base de datos
		spring.data.mongodb.port = 27017     <---- Puerto por el cual nos comunicaremos
		spring.data.mongosb.database = spring <--- El nombre de nuestra base de datos

	
	

	------------ Creando nuestras Entidades y Repositorios de nuestro proyecto

	1.- Para proveer la instancia de los datos de mongoDB a cada una de nuestras entidades en nuestro proyecto
	debemos de insertar la notacion @Document en nuestra clase entidad para que de esta manera pueda hacer 
	relacion con la tabla dentro de nuestra base de datos, se implmenta de la siguiente manera:

		@Document(collection = "student")

	-----------------------------------------------
	@Document(collection = "student")
	public class Student {

		@Id
		private String id;

		private String name;
		...
	}

	(NOTA: La notacion @Document solamente se agregara a aquellas colecciones que sean separadas de la BD, si 
	tenemos colleciones que se relacionen con otra collection, solamente agregaremos esta notacion a la coleccion
	primaria y no a las colleciones que sean ForeignKey, ver ejemplo del archivo 'MongoDB')

	2.- Una vez conectada nuestra entidad a nuestro documento con su respectiva coleccion, debemos ahora hacer la
	relacion de los campos de nuestra tabla y asosciarla a cada atributo de nuestra clase entidad, para eso
	usaremos la notacion @Field, la cual nos ayudara a hacer esta relacion, ejemplo:

		@Field
	----------------------

	private String name;

	@Field(name = "mail")
	private String email;

	private Department department;

	private List<Subject> subjects;
	

	(NOTA: La notacion @Field solo se utiliza en caso de que tengamos atriubutos en nuestra entidad que no se 
	llamen igual a los campos que tenemos en nuestro Documento de MongoDB, si los atriutos se llaman igual que
	los campos entonces no es necesario agregar la notacion @Field)

		Ejemplo:

		{_id: 1298f1uhf629uhaw
			_id
			name
			mail	<----- Este nombre del campo es 'mail', mientras que en la entidad tenemos 'email'
			... }
		
		----------------------------
		
		@Id
		private int id;
		
		private String name;
		
		@Field(name = "mail")
		private String email;	<---- Aqui usamos @Field ya que el atributo no se llama igual que el campo 
					      de la DB


	(NOTA: Siempre en el ID hay que poner la notacion @ID ya que es la forma en la que diremos que este atributo
	tendra relacion con un Id unico de cada elemento que agreguemos y que no se vaya a confundir con el ID del
	documento)

	3.- Creacion de los constructores cuando tengamos mas de un contructor en nuestra clase (Osea que tegamos mas
	clases relacionadas a nuestra clase principal en donde estemos interactuando con sus datos), para eso 
	usaremos la notacion @PersistenceConstructor , pero esta notacion es exclusivamente para la clase que esta
	representando a la coleccion entera y que no tenga alguna relacion con notaciones a las demas clases, pero
	si tenemos todo relacionado con notaciones entonces podemos hacer caso omiso de esto, ejemplo:


		
		



	.- Para correr nuestra aplicacion con MongoDB por utlimo debemos de agregar la notacion 
	@EnableMongoRepositories("[Direccion_del_paquete_repositorio]") en nuestra MainClass o clase principal


	@SpringBootApplication
	@EnableMongoRepositories("com.example.repository")
	@ComponentScan("com.example.*")
	public class MongoDbApplication {

	public static void main(String[] args) {
		SpringApplication.run(MongoDbApplication.class, args);
	}

	}






















	
		




