
-------------------------------------------------- Mongo DB ---------------------------------------------------------

MongoDB es una base de datos tipo documental que no es relacional como lo viene siendo SQL, no relacional quiere
decir que su almacenamiento de datos no se encuentrar relacionados uno con otros de forma predeterminada pero
que se pueden acceder a ellos con una clave de valor unica de registro, cada uno de estos registros los almacena
en formato JSON

Tiene una estrucutra muy flexible para los tipos de datos y escalamientos que queramos almacenar en la base de datos
lo cual hace más facil el uso de esta herramientas en aplicaciones con mucho movimiento y almacenamiento de datos



----------------------------------- Instalacion de MongoDB (Windows)

Para hacer la instalacion de MongoDB debemos de seguir los sieguientes pasos:

	1.- Ir al siguiente enlace y descargar el instalador dependiendo de los requerimientos de tu maquina
		
			https://www.mongodb.com/try/download/community

	2.- Se recomienda descargar 3T para tener una version más optima y grafica al momento de crear bases de datos
	    en MongoDB

			https://studio3t.com/download/

		(NOTA: El puerto por donde normalmente MongoDB escucha es por el puerto 27017)

	3.- Al momento de la instalacion de 3T de preferencia hay que elegir el estado de codigo para un uso más
	    entendible como programador
	4.- Para hacer la conexion de 3T a nuestro MongoDB Server tenemos que irnos a la parte de Connect en 3T
	    agregamos una nueva connection a una base de datos y si todo sale bien debe de reconocer el puerto 27017
	    ponemos cualquier nombre a nuestra coneccion, en nuestro caso fue 'local', damos Ok y listo

	5.- Podemos crear las bases de datos en nuestro servidor MongoDB en caso de querer apagar el puerto nos vamos
	    a services en windows y buscamos 'MongoDB' y lo apagamos o encendemos




--------------------------- Crear una nueva Collecion

	1.- Vamos a nuestra Collection, damos click derecho/add collection/[Nombre de la collecion]/ok
	2.- En caso de que nos salga en tablas la estructura, vamos al fondo de la barra de herramientas y en donde
	    dice 'Table View' cambiamos por 'JSON view'


--------------------------- Crear un nuevo Documento

	1.- Damos click en el icono de add document y nos desplegara una ventana en formato JSON que nos indicara
	    como queremos que sea le estructura nuestro documento, ejemplo

		{
    			"name" : "JSON",
    			"email": "json@gmail.com",
    			"department" : {
     				"department_name" : "GBS",
     				"location" : "Mexico"   
    			}
		}

		---------------- Para asignar más documentos dentro de un documento en forma de objetos

		{ 
    			"name" : "Documents", 
    			"email" : "doc@gmail.com", 
    			"subjects" : [
        			{
            				"subject_name" : "Boris", 
            				"marks_obtained" : 70.0
        			}, 
        			{
            				"subject_name" : "Aris", 
            				"marks_obtained" : 80.0
        			}
    			], 
    			"_id" : ObjectId("617c3c2746fd2647d60d9e75")
		}		


		(NOTA: Los ID's son asignados automaticamente por MongoDB y son claves de valores unicos que no se
			volveran a repetir, para poder identificar mejor cada doducmento)







---------------------------- Mongo DB para un proyecto SpringBoot

	(NOTA: Cuando nos pida la opcion de elegir si queremos correr un proyecto como Eclipse o como Maven, elegir
	la opción de Maven)
		
spring.data.mongodb.host=ds155313.mlab.com
spring.data.mongodb.port=55313
spring.data.mongodb.database=CloudFoundry_hv1dfcci_tgvvmuld
spring.data.mongodb.username=admin
spring.data.mongodb.password=admin123


	
Para antes de comenzar a utilizar mongo dentro de nuestro proyecto, debemos de tener en cuenta que en nuestro XML(POM)
necesitaremos agregar o tener 2 dependencias las cuales son la de spring-boot-starter-web y la de 
spring-boot-starter-data-mongodb

	<dependency>
		<groupId>org.springframework.boot</gropuId>
		<artifactId>spring-boot-starter-web</artifacId>
	</dependency>
	<dependency>
		<groupId>org.springframework.boot</gropuId>
		<artifactId>spring-boot-starter-data-mongodb</artifacId>
	</dependency>



	------------ Modificacion al archivo propeties


	Para la coneccion a la base de datos tenemos que especificar el host y el puerto por donde vamos a estar
	interactuando con la base de datos y para ello agregamos la siguiente sintaxis:

		spring.data.mongodb.host = localhost <---- O ponemos la IP de nuestra base de datos
		spring.data.mongodb.port = 27017     <---- Puerto por el cual nos comunicaremos
		spring.data.mongosb.database = spring <--- El nombre de nuestra base de datos

	
	

	------------ Creando nuestras Entidades y Repositorios de nuestro proyecto

	1.- Para proveer la instancia de los datos de mongoDB a cada una de nuestras entidades en nuestro proyecto
	debemos de insertar la notacion @Document en nuestra clase entidad para que de esta manera pueda hacer 
	relacion con la tabla dentro de nuestra base de datos, se implmenta de la siguiente manera:

		@Document(collection = "student")

	-----------------------------------------------
	@Document(collection = "student")
	public class Student {

		@Id
		private String id;

		private String name;
		...
	}

	(NOTA: La notacion @Document solamente se agregara a aquellas colecciones que sean separadas de la BD, si 
	tenemos colleciones que se relacionen con otra collection, solamente agregaremos esta notacion a la coleccion
	primaria y no a las colleciones que sean ForeignKey, ver ejemplo del archivo 'MongoDB')

	2.- Una vez conectada nuestra entidad a nuestro documento con su respectiva coleccion, debemos ahora hacer la
	relacion de los campos de nuestra tabla y asosciarla a cada atributo de nuestra clase entidad, para eso
	usaremos la notacion @Field, la cual nos ayudara a hacer esta relacion, ejemplo:

		@Field
	----------------------

	private String name;

	@Field(name = "mail")
	private String email;

	private Department department;

	private List<Subject> subjects;
	

	(NOTA: La notacion @Field solo se utiliza en caso de que tengamos atriubutos en nuestra entidad que no se 
	llamen igual a los campos que tenemos en nuestro Documento de MongoDB, si los atriutos se llaman igual que
	los campos entonces no es necesario agregar la notacion @Field)

		Ejemplo:

		{_id: 1298f1uhf629uhaw
			_id
			name
			mail	<----- Este nombre del campo es 'mail', mientras que en la entidad tenemos 'email'
			... }
		
		----------------------------
		
		@Id
		private int id;
		
		private String name;
		
		@Field(name = "mail")
		private String email;	<---- Aqui usamos @Field ya que el atributo no se llama igual que el campo 
					      de la DB


	(NOTA: Siempre en el ID hay que poner la notacion @ID ya que es la forma en la que diremos que este atributo
	tendra relacion con un Id unico de cada elemento que agreguemos y que no se vaya a confundir con el ID del
	documento)

	3.- Creacion de los constructores cuando tengamos mas de un contructor en nuestra clase (Osea que tegamos mas
	clases relacionadas a nuestra clase principal en donde estemos interactuando con sus datos), para eso 
	usaremos la notacion @PersistenceConstructor , pero esta notacion es exclusivamente para la clase que esta
	representando a la coleccion entera y que no tenga alguna relacion con notaciones a las demas clases, pero
	si tenemos todo relacionado con notaciones entonces podemos hacer caso omiso de esto, ejemplo:


		
		



	.- Para correr nuestra aplicacion con MongoDB por utlimo debemos de agregar la notacion 
	@EnableMongoRepositories("[Direccion_del_paquete_repositorio]") en nuestra MainClass o clase principal


	@SpringBootApplication
	@EnableMongoRepositories("com.example.repository")
	@ComponentScan("com.example.*")
	public class MongoDbApplication {

	public static void main(String[] args) {
		SpringApplication.run(MongoDbApplication.class, args);
	}

	}













---------------------- Pasos para la creacion de un proyecto REST con MongoDB


1.- [Paquete de Entidades]
	Primero tenemos que crear las entidades con la que estaremos haciendo realcion con los campos a nuestra base
	de datos 

	(NOTA: Recordemos que cada uno de estos debe de llevar su respectivo setter's y getter's, su constructor
	y su respectivo toString para ver los resultados en terminal cuando ejecutemos)
	
	--------------------------------

	package com.example.entity;

	import java.util.List;

	import org.springframework.data.annotation.Id;
	import org.springframework.data.annotation.Transient;
	import org.springframework.data.mongodb.core.mapping.Document;
	import org.springframework.data.mongodb.core.mapping.Field;

	@Document(collection = "student")
	public class Student {

	@Id
	private String id;

	private String name;

	@Field(name = "mail")
	private String email;

	private Department department;

	private List<Subject> subjects;
	
	@Transient  <---- Esta notacion ayuda a que cuando queramos guardar o actualizar datos, ignore este campo 
	private double percentage;

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public Department getDepartment() {
		return department;
	}

	public void setDepartment(Department department) {
		this.department = department;
	}

	public List<Subject> getSubjects() {
		return subjects;
	}

	public void setSubjects(List<Subject> subjects) {
		this.subjects = subjects;
	}

	public double getPercentage() {
		if (subjects != null && subjects.size() > 0) {
			int total = 0;
			for (Subject subject : subjects) {
				total += subject.getMarksObtained();
			}
			return total/subjects.size();
		}
		return 0.00;
	}

	public void setPercentage(double percentage) {
		this.percentage = percentage;
	}
	}


	------------------ [com.x.entity]

	package com.example.entity;

	import org.springframework.data.mongodb.core.mapping.Field;

	public class Subject {

	@Field(name = "subject_name")
	private String subjectName;

	@Field(name = "marks_obtained")
	private int marksObtained;

	public String getSubjectName() {
		return subjectName;
	}

	public void setSubjectName(String subjectName) {
		this.subjectName = subjectName;
	}

	public int getMarksObtained() {
		return marksObtained;
	}

	public void setMarksObtained(int marksObtained) {
		this.marksObtained = marksObtained;
	}
	}


	------------------ [com.x.entity]

	package com.example.entity;

	import org.springframework.data.mongodb.core.mapping.Field;

	public class Department {

	@Field(name = "department_name")
	private String departmentName;

	private String location;

	public String getDepartmentName() {
		return departmentName;
	}

	public void setDepartmentName(String departmentName) {
		this.departmentName = departmentName;
	}

	public String getLocation() {
		return location;
	}

	public void setLocation(String location) {
		this.location = location;
	}
	}




2.- [Paquete de nuesta clase principal - DEMO]

Esta es la creacion de nuestra main class de donde estaremos ejecutando nuestra aplicacion


	---------------------- [com.[X].demo]

	package com.example.demo;

	import org.springframework.boot.SpringApplication;
	import org.springframework.boot.autoconfigure.SpringBootApplication;
	import org.springframework.context.annotation.ComponentScan;
	import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;

	@SpringBootApplication
	@EnableMongoRepositories("com.example.repository")
	@ComponentScan("com.example.*")
	public class MongoDbApplication {

	public static void main(String[] args) {
		SpringApplication.run(MongoDbApplication.class, args);
	}
	}



3.- [Paquete de nuestra interfaz - Repositorio]

Creamos dentro de nuestro MVC la estructura de nuestra interfaz con la cual estaremos haciendo relacion con cada una
de las funciones con las que el usuario va a interactuar y aquí no se programa nada, solamente se mandan a llamar
funciones que sean creadas para localizar algun campo o funcion en particular


	(NOTA: Inclusive nos ayuda para buscar campos en especifico con valores como AND y OR)

	--------------------------- [com.[X].interface]/[com.[X].repository]

	package com.example.repository;

	import java.util.List;

	import org.springframework.data.mongodb.repository.MongoRepository;
	import org.springframework.stereotype.Repository;

	import com.example.entity.Student;

	@Repository
	public interface StudentRepository extends MongoRepository<Student, String> {

	List<Student> findByName(String name);

	Student findByEmailAndName (String email, String name);

	Student findByNameOrEmail (String name, String email);

	List<Student> findByDepartmentDepartmentName(String deptname);

	List<Student> findBySubjectsSubjectName (String subName);

	List<Student> findByEmailIsLike (String email);

	List<Student> findByNameStartsWith (String name);
	}




4.-[Paquete de nuestro Modelo - Service]

Aqui es donde nosotros hacemos todos los metodos o estructuras con las cuales vamos a estar manejando los datos 
dentro de nuestra aplicacion para las llamadas REST con nuestra notacion @Service


	----------------------- [com.[X].service]

	package com.example.service;

	import java.util.List;

	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.data.domain.PageRequest;
	import org.springframework.data.domain.Pageable;
	import org.springframework.data.domain.Sort;
	import org.springframework.stereotype.Service;

	import com.example.entity.Student;
	import com.example.repository.StudentRepository;

	@Service
	public class StudentService {
	
	@Autowired  <---- Es la notacion con la que realizamos la injeccion de dependencias de un objeto a una instancia
	StudentRepository studentRepository;

	public Student createStudent (Student student) {
		return studentRepository.save(student);
	}
	
	public Student getStudentbyId(String id) {
		return studentRepository.findById(id).get();
	}
	
	public List<Student> getAllStudents() {
		return studentRepository.findAll();
	}
	
	public Student updateStudent (Student student) {
		return studentRepository.save(student);
	}
	
	public String deleteStudent (String id) {
		studentRepository.deleteById(id);
		return "Student has been deleted.";
	}
	
	public List<Student> getStudentsByName (String name) {
		return studentRepository.findByName(name);
	}
	
	public Student studentsByNameAndMail (String name, String email) {
		return studentRepository.findByEmailAndName(email, name);
	}
	
	public Student studentsByNameOrMail (String name, String email) {
		return studentRepository.findByNameOrEmail(name, email);
	}
	
	public List<Student> getAllWithPagination (int pageNo, int pageSize) {
		Pageable pageable = PageRequest.of(pageNo - 1, pageSize);
		
		return studentRepository.findAll(pageable).getContent();
	}
	
	public List<Student> allWithSorting () {
		Sort sort = Sort.by(Sort.Direction.ASC, "name", "email");
		
		return studentRepository.findAll(sort);		
	}
	
	public List<Student> byDepartmentName (String deptName) {
		return studentRepository.findByDepartmentDepartmentName(deptName);
	}
	
	public List<Student> bySubjectName (String subName) {
		return studentRepository.findBySubjectsSubjectName(subName);
	}
	
	public List<Student> emailLike (String email) {
		return studentRepository.findByEmailIsLike(email);
	}
	
	public List<Student> nameStartsWith (String name) {
		return studentRepository.findByNameStartsWith(name);
	}
	}




5.-[Paquete de nuestro controlador - Controller]

Aquí es donde hacemos toda la estructura logica de como se van a manejar los datos que vamos a estar recibiendo en
nuestro proyecto, el manejo de las notacion @GetMapping, @PostMapping, @PutMapping, @DeleteMapping para el manejo de 
cada uno de los servicios



	---------------------- [com.[X].controller]

	package com.example.controller;

	import java.util.List;

	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.web.bind.annotation.DeleteMapping;
	import org.springframework.web.bind.annotation.GetMapping;
	import org.springframework.web.bind.annotation.PathVariable;
	import org.springframework.web.bind.annotation.PostMapping;
	import org.springframework.web.bind.annotation.PutMapping;
	import org.springframework.web.bind.annotation.RequestBody;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RequestParam;
	import org.springframework.web.bind.annotation.RestController;

	import com.example.entity.Student;
	import com.example.service.StudentService;

	@RestController
	@RequestMapping("/api/student")
	public class StudentController {
	
	@Autowired
	StudentService studentService;

	@PostMapping("/create")
	public Student createStudent(@RequestBody Student student) {
		return studentService.createStudent(student);
	}
	
	@GetMapping("/getById/{id}")
	public Student getStudentbyId(@PathVariable String id) {
		return studentService.getStudentbyId(id);
	}
	
	@GetMapping("/all")
	public List<Student> getAllStudents() {
		return studentService.getAllStudents();
	}
	
	@PutMapping("/update")
	public Student updateStudent(@RequestBody Student student) {
		return studentService.updateStudent(student);
	}
	
	@DeleteMapping("/delete/{id}")
	public String deleteStudent(@PathVariable String id) {
		return studentService.deleteStudent(id);
	}
	
	@GetMapping("/studentsByName/{name}")
	public List<Student> studentsByName(@PathVariable String name) {
		return studentService.getStudentsByName(name);
	}
	
	@GetMapping("/studentsByNameAndMail")
	public Student studentsByNameAndMail(@RequestParam String name,
			@RequestParam String email) {
		return studentService.studentsByNameAndMail(name, email);
	}
	
	@GetMapping("/studentsByNameOrMail")
	public Student studentsByNameOrMail(@RequestParam String name,
			@RequestParam String email) {
		return studentService.studentsByNameOrMail(name, email);
	}


	/*Para hacer la prueba en postman para cada estructura de AND u OR tenemos que hacerla despues de un '?' y
	  agregando cada uno de los campos que deseamos obtener, por ejemplo:

		http://localhost:8080/api/student/studentsByNameOrMail?name=JSON&email=edwinam007@hotmail.com

	(NOTA: Tener en cuenta que cuando vayamos a tener más de un resultado como respuesta de la BD's debemos de
	almacenar todo en una Lista, no hacer que el retorno sea como un tipo Student sino como una Lista de todos
	esos valores o recibiras el error [returned non unique result])

	*/


	
	@GetMapping("/allWithPagination")
	public List<Student> getAllWithPagination(@RequestParam int pageNo,
			@RequestParam int pageSize) {
		return studentService.getAllWithPagination(pageNo, pageSize);
	}

	/*Para hacer la prueba en postman para cada estructura de paginacion tenemos que hacerla despues de un '?' y
	  agregando cada uno de los campos que deseamos obtener, por ejemplo:

		http://localhost:8080/api/student/allWithPagination?pageNo=1&pageSize=10

	(NOTA: Tener en cuenta que los valores no deben de ser negativos y cada vez que se ponga en el pageSize la
	cantidad es la cantidad de datos que se mostraran por cada pagina)

	*/

	
	@GetMapping("/allWithSorting")
	public List<Student> allWithSorting() {
		return studentService.allWithSorting();
	}
	
	@GetMapping("/byDepartmentName")
	public List<Student> byDepartmentName(@RequestParam String deptName) {
		return studentService.byDepartmentName(deptName);
	}

	/*Cuando queramos hacer busqueda mediante documentos en vez de solo campos se usa la ruta de del tipo de dato
	que queramos de ese documento, en este caso nosotros en nuestra Interfaz/Respository vamos a trazar la ruta
	hacia donde se encuentra ese campo del documento en nuestra BD, ejemplo:

		List<Student> findByDepartmentDepartmentName(String deptname);
			
	Aquí el tipo de dato en nuestra entidad Student es Department pero ademas le agregamos el nombre del campo 
	del documento al que queremos tener acceso, para eso accedemos de la siguiente manera en Postman:
		

		http://localhost:8080/api/student/byDepartmentName?deptName=Boris

	(NOTA: Tener en cuenta que los nombres del metodo de la interfaz se hace con los nombres de las variables 
	que se crearon en los entity documents, y la variable que colocaremos en la URL es la que asignamos en el
	@RequestParam de nuestro Controlador)

	*/
	
	
	@GetMapping("/bySubjectName")
	public List<Student> bySubjectName(@RequestParam String subName) {
		return studentService.bySubjectName(subName);
	}
	

	/*Cuando queramos hacer busqueda mediante un objeto de documentos en vez de solo campos se usa la ruta de 
	del tipo de dato que queramos de ese objeto de documentos, en este caso nosotros en nuestra 
	Interfaz/Respository vamos a trazar la ruta hacia donde se encuentra ese campo del documento en nuestra BD, 
	ejemplo:

		List<Student> findBySubjectSubjectName(String subname);

	Aquí el tipo de dato en nuestra entidad Student es Subject pero ademas le agregamos el nombre del campo 
	de los objetos de documento al que queremos tener acceso, accedemos de la siguiente manera en Postman:

		http://localhost:8080/api/student/bySubjectName?subName=C++

	(NOTA: Tener en cuenta que los nombres del metodo de la interfaz se hace con los nombres de las variables 
	que se crearon en los entity documents, y la variable que colocaremos en la URL es la que asignamos en el
	@RequestParam de nuestro Controlador)

	*/

	@GetMapping("/emailLike")
	public List<Student> emailLike(@RequestParam String email) {
		return studentService.emailLike(email);
	}

	/*Cuando queramos hacer busqueda mediante un campo el cual contenga una cierta frase en especifico usamos
	la notacion IsLike en nuestra Interface/Repository 
	ejemplo:

		List<Student> findByEmailIsLike(String email);

	(NOTA: Este tipo de datos como IsLike, IsNotLike, IsNotNull, NotLike, Equals, etc... se les conoce como 
	JPA Keywords)

		https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods
		https://www.baeldung.com/spring-data-derived-queries
		https://attacomsian.com/blog/derived-query-methods-spring-data-jpa

	Aquí el tipo de dato en nuestra entidad Student es Subject pero ademas le agregamos el nombre del campo 
	de los objetos de documento al que queremos tener acceso, accedemos de la siguiente manera en Postman:

		http://localhost:8080/api/student/emailLike?email=hotmail

	(NOTA: Tener en cuenta que los nombres del metodo de la interfaz se hace con los nombres de las variables 
	que se crearon en los entity documents, y la variable que colocaremos en la URL es la que asignamos en el
	@RequestParam de nuestro Controlador)

	*/

	
	@GetMapping("/nameStartsWith")
	public List<Student> nameStartsWith(@RequestParam String name) {
		return studentService.nameStartsWith(name);
	}
	}






------------------------------- Pagiantion o Paginacion

Esta es una forma de hacer que cada uno de nuestros resultados se encuentren limitados por una cierta cantidad de 
resultados y que no nos muestre todos de un solo momento, en caso de tener como resultado 100 datos, hacer que nos
aparezcan en 4 ventadas de 25 resultados cada uno, para eso nos sirve la paginación, ejemplo

	


------------------------------- @DBRef

Esta notacion nos ayuda para cuando tengamos que enlazar varios Documentos dentro de nuestra Entidad principal y que
se pueda hacer referencia a cada campo de un Documento distinto, ejemplo:

	----------------------- [Entidad Foranea]

	package com.example.entity;

	import org.springframework.data.mongodb.core.mapping.Field;
	
	@Document (name = "subject")
	public class Subject {

	@Field(name = "subject_name")
	private String subjectName;

	@Field(name = "marks_obtained")
	private int marksObtained;
	...
	}

	----------------------- [Entidad Foranea]

	package com.example.entity;

	import org.springframework.data.mongodb.core.mapping.Field;

	@Document (name = "department") <---- Esto indica que estos documentos son separados o unicos
	public class Department {

	@Field(name = "department_name")
	private String departmentName;

	private String location;
	...
	}

	----------------------- [Entidad Principal]
	
	@Document(collection = "student")
	public class Student {

	...

	@DBRef <----- Así es como se hace referencia a documentos seperados del principal y acceder a sus datos
	private Department department;

	@DBRef
	private List<Subject> subjects;
	
	}





----------------------- Lazy mode para @DBRef

Cuando nosotros queramos no mostrar documentos una vez que hacemos referencia a una lista de objetos de tipo documentos
entonces agregamos al lazy mode en True, por Default el lazy mode viene como False pero si queremos cambiarlo solo
ponemos 'lazy = true' esto hace que el proceso de obtencios de datos no se lleve a cabo, ejemplo

	@DBRef <----- Mostrara los datos de Department ya que el lazy por defecto esta en False
	private Department department;

	@DBRef (lazy = true) <----- No mostrara los datos de Department ya que el lazy se cambio por True
	private List<Subject> subjects;




	----------------------- Repositorios para @DBRef

	Una vez que tenemos nuestros documentos enlazados, tenemos que hacer un respectivo repositorio para cada uno
	de estas colleciones ya que cada uno debera contener sus propios metodos para poder obtener un dato hacia esa
	estructura, ejemplo:


	--------------------------- [com.[X].interface]/[com.[X].repository]

	package com.example.repository;

	import java.util.List;

	import org.springframework.data.mongodb.repository.MongoRepository;
	import org.springframework.stereotype.Repository;

	import com.example.entity.Department;

	@Repository
	public interface DepartmentRepository extends MongoRepository<Student, String> {

	}


	--------------------------- [com.[X].interface]/[com.[X].repository]

	package com.example.repository;

	import java.util.List;

	import org.springframework.data.mongodb.repository.MongoRepository;
	import org.springframework.stereotype.Repository;

	import com.example.entity.Subject;

	@Repository
	public interface SubjectRepository extends MongoRepository<Student, String> {

	}


	(NOTA: Siempre que vayamos a usar cada uno de estos repositorios debemos de colocar su respectivo @Autowired
	para la enjeccion de dependencias dentro de la clase donde los vayamos a usar [Donde normalmente es en 
	el Service] quedando de la siguiente manera)

		------------- [com.[X].service]

		@Autowired
		SubjectRepository subjectRepository;

		@Autowired
		DepartmentRepository departmentRepository;

		public Student createStudent (Student student) {
			/*De esta manera almacenamos en una collecion distinta a nuestra entidad principal*/
			if( student.getDepartment() != null ){ 
				departmentRepository.save(student.getDepartment());
			}
			/*De esta manera almacenamos en un objeto de colleciones distinto a nuestra entidad principal*/
			if( student.getSubject() != null && student.getSubject() > 0){
				subjectRepository.saveAll(student.getSubject());	
			}
			return studentRepository.save(student);
		}
		



-------------------------- Notacion @Query

Cuando nosotros queramos hacer un query nativo dentro de MongoDB podemos hacerlo con la notacion @Query en nuestra
interfaz o repositorio y de esta manera la asignación dentro de una URL se puede asignar de forma mas sencilla,
ejemplo:

	@Query ("{\"name\" : \"?0\" }") <--- La notación '?0' indica que en esa parte del query se asignara el valor que contenga la variable 'name' asginada en nuestro metodo
	List<Student> getByName(String name); 

----------------- [Servicio]

Aquí cambiamos lo que viene siendo la referencia a nuestro nuevo metodo, ejemplo

	public List<Student> getStudentsByName (String name) {
		return studentRepository.getByName(name);	<---- Cambiamos de findByName por getByName y listo
	}

Como se vería esto haciendolo desde la URL mediante Postman se tendría que hacer de la siguiente manera

	http://localhost:8080/api/student/studentsByName/Jhon

























	
		




