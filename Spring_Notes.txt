-vm
plugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_16.0.1.v20210528-1205/jre/bin

ITSCK

PointCut expressions son las tecnicas de ("*.*.springboot.*.*.(**)")

MySQL
root
.Zeld4001Petronilda001

------------------------------------------ Instalando el JDK en JAVA_HOME -----------------------------------

Para poder tener como base o preferencia la instalación de nuestro JDK en nuestra maquina tenemos que hacer
lo siguiente una vez instalado el JDK

	1.- Presionamos Windows y tecleamos "This PC", en vez presionarlo daremos ClickDer. y seleccionamos
	    "properties"
	2.- En el menu del lado derecho presionamos la opción "Advanced system settings"
	3.- En la ventana desplegable seleccionamos "Environment Variables"
	4.- En el 2do cuado de abajo donde dice "System Variables" damos click en "New", lo llamamos 
	    "JAVA_HOME" y seleccionamos el directorio de nuestro JDK instalado, damos Aceptar
	5.- En ese mismo cuado seleccionamos la variable "PATH" y agregamos una nueva variable al PATH, la
	    llamamos %JAVA_HOME%\bin , presionamos el boton Move UP y colocamos la variable hasta arriba
	6.- Damos OK, OK, OK y listongo! :D


---------------------------------------- Modulos de Spring --------------------------------------------------

Los modulos de spring son aquellas dependencias que nos ayudan a realizar los distintos procesos que usaremos
para el desarrollo de nuestra aplicación, como ejemplo:

	Acces Data:
		1.- JDBC
		2.- JMS
		3.- Transaction
		4.- ORM


	WEB:
		1.- MVC
		2.- Portlet
		3.- WebSocket
		4.- Servlet

	Core container:
		1.- Core
		2.- Beans
		3.- Context
		4.- SpEL


--------------------------------------------- Spring Bean ---------------------------------------------------

Cuando se nos este hablando de un Spring Bean solo pensemos que un simple objeto de java con sus respectivas
caracteristicas de un objeto común

--------------------------------------------- Maven ---------------------------------------------------------

Para poder encontrar actualiaciones de dependencias para maven lo que tenemos que hacer es ir a la siguiente
pagina

	search.maven.org

Ahí encontraremos mucho de los contenidos de dependencias que necesitemos


---------------------------------------------- Jason --------------------------------------------------------

Para poder crear archivos Json a POJO's e inclusive para poder hacerlo vicebersa necesitaremos agregar en
nuestro archivo POM la siguiente dependencia

	<dependency>
  		<groupId>com.fasterxml.jackson.core</groupId>
  		<artifactId>jackson-databind</artifactId>
  		<version>2.12.3</version>
	</dependency>

Despues de agregar la dependencia los pasos para generar los JSON son:

1.[Desde nuestra clase Main]

try{
	ObjectMapper mapper = new ObjectMapper();

	Student theStudent = mapper.readValue(new File("data/sample-lite.json"),student.class);

	System.out.println("First Name: "+theStudent.getFirstName());

	....

}catch(Exception e){
	....
}

-------------------------------------------- @Transactional -------------------------------------------------

Cuando usamos la notacion Transactional es por que vamos a ahacer un enlace directo de nuestro DAO a nuestro
controlador, en caso de no quererlo usar entonces necesitaremos crear un Servicio para hacer una relacion
entre nuestro DAO y nuestro Controlador, el cual hacer esto es la practica que veras todos los días en un
proyecto real, ejemplo del servicio:


	


------------------------------------------------ Springboot -------------------------------------------------

1.- Cuando descargamos un nuevo proyecto de Springboot lo que tenemos que hacer es epecificar en el archivo de
application.properties la conexion a la JDBC

	spring.datasourcce.url=jdbc:mysql://localhost:3306/employee_directory?useSSL=false&serverTimezone=UTC

	spring.datasource.username=springstudent
	spring.datasource.password=springstudent

	(NOTA: Si queremos cambiar de puerto usamos el codigo server.port=7070,8989,etc...)

2.- Especificamos en nuestro archivo POM la version de Maven que usaremos, haciendolo de la siguiente manera

	<properties>
	   ...
	   <maven-jar-plugin.version>3.1.1</maven-jar-plugin.version>
	</properties>


3.- Creamos un DAO para nuestro nuevo proyecto aplicando MVC (Module View Controller) 
    [com.luv2code.springboot.cruddemo.entity]

	Creamos una nueva interface en nuestro proyecto y especificamos solamente las funciones que usara
	nuestra inerfaz, ejemplo: [Employee]


	public List<Employee> findall();


4.- Creamos la implementación para nuestro DAO

	@Repository
	public class EmployeeDAOHibernateImpl interface EmployeeDAO{
		
		private EntityManager entityManager;

		@Autowired
		public EmployeeDAOHibernateImpl(EntityManager theEntityManager){
			entityManager = theEntityManager;
		}

	}

5.- Creamos nuestra paqueteria para el DAO [com.luv2code.springboot.cruddemo.dao]


	------------------------ Creamos la interfaz [EmployeeDAO]

	import java.util.List;

	public interface EmployeeDAO {
    		public List<Employee> findall();
	}

	------------------------ Creamos su implementación [EmployeeDAOImpl]

	import com.luv2code.springboot.cruddemo.entity.Employee;
	import org.hibernate.Session;
	import org.hibernate.query.Query;
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.stereotype.Repository;
	import org.springframework.transaction.annotation.Transactional;

	import javax.persistence.EntityManager;
	import java.util.List;
	
	@Repository
	public class EmployeeDAOHibernateImpl implements EmployeeDAO{

		// Hacemos una injección de nuestra Interfaz
    		private EntityManager entityManager;
    		
		// Hacemos la injección mediante el constructor
   	 	@Autowired
    		public EmployeeDAOHibernateImpl(EntityManager theEntityManager){
        		entityManager = theEntityManager;
    		}


		@Override
		@Transactional
    		public List<Employee> findall() {
        		// Creamos la session de hibernate
        		Session currentSession = entityManager.unwrap(Session.class);

        		// Creamos un query
        		Query<Employee> theQuery = currentSession.createQuery("from Employee",Employee.class);
        
			// Ejecutamos el query para obtener un resultado
        		List<Employee> employees = theQuery.getResultList();

        		// Retornamos los resultados
        		return employees;
    			}
		}


6.- Creamos el paquete para nuestros controladores [com.luv2code.springboot.cruddemo.rest]

	-------------------------- Creamos nuestra Clase de Controlador[EmployeeRestController]

	import com.luv2code.springboot.cruddemo.dao.EmployeeDAO;
	import com.luv2code.springboot.cruddemo.entity.Employee;
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.web.bind.annotation.GetMapping;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RestController;

	import java.util.List;

	@RestController
	@RequestMapping("/api")
	public class EmployeeRestController {

    		// Inicializamos la variable hacia nuestro DAO con nuestro Controlador
   		private EmployeeDAO employeeDAO;

    		// Hacemos la injección mediante constructor
    		@Autowired
    		public EmployeeRestController(EmployeeDAO theEmployeDAO) {
        		employeeDAO = theEmployeDAO;
    		}

    		// Creamos el controlador para el mapeo de /employees
    		@GetMapping("/employees")
    		public List<Employee> findAll(){
        		return employeeDAO.findall();
    		}
	}

7.- Ejecutamos!! (Con IntelliJ y el JDK 1.8 por que Eclipse no sirve para una mierda):D




------------------------------------- Creamos un CRUD Completo para Springboot ------------------------------

Para crear nuevas acciones para nuestro controlador, lo que tenemos que hacer es primero modificar en la
Interfaz de nuestro DAO, despues la implementacion del DAO, luego modificar el Servicio, despues el
Controlador para finalizar nuestro CRUD completo y sin errores.

1.- [Interfaz - EmployeeDAO]
	
	public interface EmployeeDAO {
    		....

    		public Employee findId(int id);  // Para buscar por ID
 
    		public void saveEmployee(Employee employee); // Guardar empleado

    		public void deleteEmployee(int id); // Eliminar por ID

	}


2.- [Class - EmployeeDAOHibernateImpl]

    @Override  // <------- Ya no usamos el @Transactional por que ahora hicimos un servicio para conexión
    public Employee findId(int id) {

        // Creamos la session de hibernate
        Session currentSession = entityManager.unwrap(Session.class);

        // Creamos la peticion de nuestro empleado
        Employee theEmployee = currentSession.get(Employee.class,id);

        // Retornamos los resultados
        return theEmployee;
    }

    @Override   // <------- Ya no usamos el @Transactional por que ahora hicimos un servicio para conexión
    public void saveEmployee(Employee employee) {
        // Creamos la session de hibernate
        Session currentSession = entityManager.unwrap(Session.class);

        // Creamos la peticion de nuestro empleado
        currentSession.saveOrUpdate(employee);
    }

    @Override  // <------- Ya no usamos el @Transactional por que ahora hicimos un servicio para conexión
    public void deleteEmployee(int id) {
        // Creamos la session de hibernate
        Session currentSession = entityManager.unwrap(Session.class);

        // Creamos la peticion de nuestro empleado
        Query<Employee> theQuery = currentSession.createQuery("delete from Employee e where e.id=:borrarEmpleado"); // Para poder asignar un parametro dentro del query se hace con ':' seguido del nombre del parametro
        theQuery.setParameter("borrarEmpleado",id);  // De esta manera nosotros podemos asignar un parametro dentro de una petición de query y se tiene que llamar igual que el parametro que vamos a asignar
        theQuery.executeUpdate();
    }


3.- [Interfaz - EmployeeService]

	(NOTA: Debemos de tener los mismos metodos en la Interfaz de Servicio como en la de DAO)

	import com.luv2code.springboot.cruddemo.entity.Employee;

	import java.util.List;

	public interface EmployeeService {
   		public List<Employee> findAll();

    		public Employee findId(int id);

    		public void saveEmployee(Employee employee);

    		public void deleteEmployee(int id);
	}


4.- [Clase - EmployeeServiceImpl]

    import com.luv2code.springboot.cruddemo.dao.EmployeeDAO;
    import com.luv2code.springboot.cruddemo.entity.Employee;
    import com.luv2code.springboot.cruddemo.service.EmployeeService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;
    import org.springframework.transaction.annotation.Transactional;

    import java.util.List;

    @Service
    public class EmployeeServiceImpl implements EmployeeService {

    // Hacemos una injección de nuestro DAO para enlazar el Controlador al DAO
    private EmployeeDAO employeeDAO;

    // Hacemos la injección mediante constructor
    @Autowired
    public EmployeeServiceImpl(EmployeeDAO theEmployeDAO){
        employeeDAO = theEmployeDAO;
    }

    @Override
    @Transactional
    public List<Employee> findAll() {
        return employeeDAO.findall();
    }

    @Override
    @Transactional
    public Employee findId(int id) {
        return employeeDAO.findId(id);
    }

    @Override
    @Transactional
    public void saveEmployee(Employee employee) {
        employeeDAO.saveEmployee(employee);
    }

    @Override
    @Transactional
    public void deleteEmployee(int id) {
        employeeDAO.deleteEmployee(id);
    }
}


5.- Como creamos nuestra nueva capa de Servicio, tenemos que refactorizar nuestro codigo en nuestro 
    controlador para que ahora se enlace directamente con el Servicio en vez del DAO directamente, para eso
    hacemos los siguientes cambios - El tipo de injección, ejemplo:


    public class EmployeeRestController {

    // Inicializamos la variable hacia nuestro Servicio con nuestro Controlador
    private EmployeeService employeeService;   // <--- En vez de EmployeDAO ahora es EmployeeService

    // Hacemos la injección mediante constructor
    @Autowired
    public EmployeeRestController(EmployeeService theEmployeService) {
        employeeService = theEmployeService;   // <--- En vez de EmployeDAO ahora es EmployeeService
    }

    // Creamos el controlador para el mapeo de /employees
    @GetMapping("/employees")
    public List<Employee> findAllEmployees(){
        return employeeService.findAll();  // <--- En vez de EmployeDAO ahora es EmployeeService
    }
}




	------------------- Creamos los procesos para el CRUD en el Controlador

    @RestController
    @RequestMapping("/api")
    public class EmployeeRestController {

    ....


    // Creamos el controlador para el mapeo de /employees/{employeeId}
    @GetMapping("/employees/{employeeId}") // <---- Debe de llamarse igual al @PathVariable
    public Employee findEmployeeId(@PathVariable int employeeId){ // <---- Debe de llamarse igual al parametro
        if(employeeService.findId(employeeId) == null){
            throw new RuntimeException("User "+employeeId+" not found :(");
        }
        return employeeService.findId(employeeId);
    }

    // Creamos el mapeo para Agregar un nuevo empleado
    @PostMapping("/employees")
    public Employee addEmployee(@RequestBody Employee theEmployee){
        // Tambien solo en caso de pasar los datos como JSON, asignando en 0 el setId
        // le decimos de manera forzada que vamos a guardar un nuevo objeto en lugar de actualizar
        theEmployee.setId(0);
        employeeService.saveEmployee(theEmployee);
        return theEmployee;
    }

    // Creamos el mapeo para Actualizar un empleado
    @PutMapping("/employees")
    public Employee updateEmployee(@RequestBody Employee theEmployee){
        employeeService.saveEmployee(theEmployee);
        return theEmployee;
    }

    // Creamos el mapeo para Borrar un empleado
    @DeleteMapping("/employees/{employeeId}") // <---- Debe de llamarse igual al @PathVariable
    public String deleteEmployee(@PathVariable int employeeId){  // <---- Deben de llamarse igual
        if(employeeService.findId(employeeId) == null){
            throw new RuntimeException("User "+employeeId+" not found :( ");
        }
        employeeService.deleteEmployee(employeeId);
        return "User "+employeeId+" successful eliminated";
    }

}





------------------------------------------------- Uso de JPA ------------------------------------------------

Anteriormente el CRUD que nosotros hicimos el DAO con Hibernate pero lo que es más practico y recomendable es
el usar JPA dentro de un modelo de negocios, así que para eso debemos entender los conceptos entre el nativo
Hibernate y el nuevo JPA, cuales son sus diferencias, pues las diferencias varian en el contexto, pero los
metodos más utilizados entre JPA son:


	Action				Hibernate Method			JPA Method
    -------------------		  ----------------------------------	  -----------------------------------
	Create/Save			session.save(...)			entityManager.persist(...)
	Retrieve an ID			session.get(..) / load(..)		entityManager.find(...)
	Retrieve list			session.createQuery(..)			entityManager.createQuery(..)
	Save or Update			session.saveOrUpdate(..)		entityManager.merge(..)
	Delete				session.delete(...)			entityManager.remove(..)
		
































