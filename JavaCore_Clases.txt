
----------------------------- Los 4 principios de la POO

	1.- Encapsulación
	2.- Inherencia
	3.- Abstracción
	4.- Polimorfismo


1.- Encapsulación:	Es la forma en la que protegemos las propiedas y funciones de un objeto de otros objetos

2.- Inherencia:		Es el proceso de definir un nuevo objeto con la ayuda de un objeto ya existente usando la
			palabra reservada extends

3.- Abstraccion:	Es princpio de esconder todos los detalles innecesarios de un objeto y mostrar solamente las
			caracteristicas que el otro objeto necesita comunicar con este

4.- Polimorfismo:	Significa multiples formas o comportamientos y es la forma en la que podemos acceder a esas
			funciones unicas de cada clase u objeto




----------------------- Statico y no estatico

El echo de asignar un tipo statico es de que solamente se usaran esas caracteristicas en la classe y cuando se usen
de forma NO estatica las caracteristicas pasaran a ser de tipo objeto, osea que se podran ver cuando sean mandadas a
llamar en otra clase a ese objeto





----------------------- Creación de el contructor

Cuando no especificamos un constructor principal '()' lo que hace java es que crea un constructor por default al 
momento de compilar y se ejecuta sin problemas, pero esta no es una buena practica



----------------------- Hilos

La utilización de hilos es simplemente la implementación de una tarea en proceso de ejecución





	

	--------- Ejecucíon de Multihilos no secuenciales

	Con este metodo nosotros podemos realizar mutliples tareas de forma paralela y usar el metodo run() para
	poder generar el uso de trabajo paralelo, ejemplo:

	public lass Multithread extends Thread{

		public static void main(String arg[]){
			Multithread mt = new Multithread();
			mt.start();

			for(int j=0;j<=100;j++){ system.out.print("j: "+j+"\t")}
		
		}		

		public void run(){
			//Aqui ponemos todo lo que queramos que el hilo ejecute
			for(int i=0;i<=100;i++){
				system.out.print("i: "+i+"\t")
			}
		}

	}	//Salida j:1 i:1 i:2 j:2 i:3 i:4 i:5 j:3






------------------- Dormir un hilo

Para nosotros poder dormir un hilo utilizamos el metodo Thread.sleep([Cantidad en ms])



------------------- Java 8

Java 8 es una version con caracteristicas importantes que nos ayudan al desarrollo de aplicaciones usando la 
programación funcional, como por ejemplo funciones tipo lambda, interfaces funcionales, methodos default,
predicados, etc.



	-------------- Lambda

	UN lambda es una funcion que no tiene nombre, tampoco un tipo de retorno y normalmente no utiliza variables
	en si es una funcion anonima, para poder usar expresiones Lambda necesitas siempre una Interfaz Funcional
	y para eso utilizamos la notación @FunctionalInterface

	Los beneficios de estas funciones es que nos ayudan a escribir menos codigo, no son faciles de hackear y su
	proceso de ejecución es más rapido, lo malo es que no en todo puede ser aplicable y su sintaxis puede ser
	algo revoltoso para personas que no comprenden este estigma

	Algunos ejemplos de interfaces funcionales son:

			Runnable 		run
			Compare			compareTo




	---------- Ejemplo de una interfaz funcional

	@FunctionalInterface
	public interface A{

		void myInterface();  <------- Siempre debe de ir un unico methodo o sino no sera una interfaz funcional

	}


	@FunctionalInterface
	public interface B extends A{

		void myInterface();
	}


	------------- Creando un lambda

	public class C implements A{

		@Override
		public void myMethod(){
			System.out.println("inside method")
		}
	}

		--- En otra clase ejecutamos nuestro lambda --


	public class Test{
		
		public static void main(String arg[]){
			A a = ()->System.out.println("Inside MyMethod");
			a.myMethod();	
		}
		//Resultado: inside Method
	}	



		---- Asignación de lambdas con parametros ---

	@FunctionalInterface
	public interface Sum{

		void add(int a, int b);
	}

	public class Test{
		
		public static void main(String arg[]){
			Sum s = (x,y)->System.out.println("Sum is: "+(x+y));
			a.add(10,20);	
		}
		//Resultado: inside Method
	}


		---- Asignación de lambdas con Interfaz Runnable ---

	@FunctionalInterface
	public class MyRunnableImpl implements Runnable{

		@Override
		public void run(){
			for(int i=1;i<=10;i++){System.out.println("Child Thread")}
		}
	}

	public class Test{
		
		public static void main(String arg[]){
			Runnable r = () -> {
				for(int i=1; i<=10; i++){
					System.out.println("Child Thread")
				}
			};
			for(int i=1; i<=10; i++){
				System.out.println("Main Thread")
			}	
		}
		//Resultado: inside Method
	}


		---- Asignación de lambdas con Interfaz Runnable ---

	@FunctionalInterface
	public class MyRunnableImpl implements Runnable{

		@Override
		public void run(){
			for(int i=1;i<=10;i++){System.out.println("Child Thread")}
		}
	}

	public class Test{
		
		public static void main(String arg[]){
			Runnable r = () -> {
				for(int i=1; i<=10; i++){
					System.out.println("Child Thread")
				}
			};
			Thread t = new Thread(r);
			t.start();
			
			for(int i=1; i<=10; i++){
				System.out.println("Main Thread")
			}	
		}
		//Resultado: inside Method
	}




























































































































































































			